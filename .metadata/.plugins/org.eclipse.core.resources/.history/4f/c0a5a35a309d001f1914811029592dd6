package dao;

import entity.SanPham;
import connectSQL.KetNoiSQL;

import java.sql.*;
import java.util.ArrayList;

public class SanPhamDAO {
	private Connection conn;

	public SanPhamDAO() {
		conn = KetNoiSQL.getInstance().getConnection();
	}

	public ArrayList<SanPham> getList() {
		ArrayList<SanPham> list = new ArrayList<>();

		String sql = "SELECT sp.*, dm.TenDM FROM SanPham sp " + "JOIN DanhMuc dm ON sp.MaDM = dm.MaDM";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("MaSP"));
				sp.setTenSP(rs.getString("TenSP"));
				sp.setMaDM(rs.getString("MaDM"));
				sp.setTenDM(rs.getString("TenDM"));
				sp.setGiaBan(rs.getDouble("GiaBan"));
				sp.setSoLuong(rs.getInt("SoLuong"));
				sp.setDonVi(rs.getString("DonVi"));
				sp.setHinhAnh(rs.getString("HinhAnh"));
				sp.setTrangThai(rs.getString("TrangThai"));

				System.out.println("Loaded from DB - MaSP: " + sp.getMaSP() + ", TenDM: " + sp.getTenDM());

				list.add(sp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	public SanPham getById(String maSP) {
		SanPham sp = null;
		String sql = "SELECT sp.*, dm.TenDM FROM SanPham sp " + "JOIN DanhMuc dm ON sp.MaDM = dm.MaDM "
				+ "WHERE MaSP = ?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, maSP);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				sp = new SanPham();
				sp.setMaSP(rs.getString("MaSP"));
				sp.setTenSP(rs.getString("TenSP"));
				sp.setMaDM(rs.getString("MaDM"));
				sp.setTenDM(rs.getString("TenDM"));
				sp.setGiaBan(rs.getDouble("GiaBan"));
				sp.setSoLuong(rs.getInt("SoLuong"));
				sp.setDonVi(rs.getString("DonVi"));
				sp.setHinhAnh(rs.getString("HinhAnh"));
				sp.setTrangThai(rs.getString("TrangThai"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return sp;
	}

	public ArrayList<SanPham> getByCategory(String tenDM) {
		ArrayList<SanPham> list = new ArrayList<>();

		if (tenDM.equals("Tất cả")) {
			return getList();
		}

		String sql = "SELECT sp.*, dm.TenDM FROM SanPham sp " + "JOIN DanhMuc dm ON sp.MaDM = dm.MaDM "
				+ "WHERE dm.TenDM = ?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, tenDM);
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("MaSP"));
				sp.setTenSP(rs.getString("TenSP"));
				sp.setMaDM(rs.getString("MaDM"));
				sp.setTenDM(rs.getString("TenDM"));
				sp.setGiaBan(rs.getDouble("GiaBan"));
				sp.setSoLuong(rs.getInt("SoLuong"));
				sp.setDonVi(rs.getString("DonVi"));
				sp.setHinhAnh(rs.getString("HinhAnh"));
				sp.setTrangThai(rs.getString("TrangThai"));
				list.add(sp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	public boolean add(SanPham sp) {
		String sql = "INSERT INTO SanPham(MaSP, TenSP, MaDM, GiaBan, SoLuong, DonVi, HinhAnh, TrangThai) "
				+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?)";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, sp.getMaSP());
			ps.setString(2, sp.getTenSP());
			ps.setString(3, sp.getMaDM());
			ps.setDouble(4, sp.getGiaBan());
			ps.setInt(5, sp.getSoLuong());
			ps.setString(6, sp.getDonVi());
			ps.setString(7, sp.getHinhAnh());
			ps.setString(8, sp.getTrangThai());

			return ps.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	public boolean update(SanPham sp) {
		String sql = "UPDATE SanPham SET TenSP=?, MaDM=?, GiaBan=?, "
				+ "SoLuong=?, DonVi=?, HinhAnh=?, TrangThai=? WHERE MaSP=?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, sp.getTenSP());
			ps.setString(2, sp.getMaDM());
			ps.setDouble(3, sp.getGiaBan());
			ps.setInt(4, sp.getSoLuong());
			ps.setString(5, sp.getDonVi());
			ps.setString(6, sp.getHinhAnh());
			ps.setString(7, sp.getTrangThai());
			ps.setString(8, sp.getMaSP());

			return ps.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	public boolean delete(String maSP) {
		String sql = "DELETE FROM SanPham WHERE MaSP=?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, maSP);
			return ps.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	public ArrayList<SanPham> searchByName(String keyword) {
		ArrayList<SanPham> list = new ArrayList<>();

		String sql = "SELECT sp.*, dm.TenDM FROM SanPham sp " + "JOIN DanhMuc dm ON sp.MaDM = dm.MaDM "
				+ "WHERE TenSP LIKE ?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, "%" + keyword + "%");
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("MaSP"));
				sp.setTenSP(rs.getString("TenSP"));
				sp.setMaDM(rs.getString("MaDM"));
				sp.setTenDM(rs.getString("TenDM"));
				sp.setGiaBan(rs.getDouble("GiaBan"));
				sp.setSoLuong(rs.getInt("SoLuong"));
				sp.setDonVi(rs.getString("DonVi"));
				sp.setHinhAnh(rs.getString("HinhAnh"));
				sp.setTrangThai(rs.getString("TrangThai"));
				list.add(sp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	// Method kiểm tra mã sản phẩm đã tồn tại
	public boolean isMaSPExists(String maSP) {
		String sql = "SELECT COUNT(*) FROM SanPham WHERE MaSP = ?";

		try (PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, maSP);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				return rs.getInt(1) > 0;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public void close() {
		try {
			if (conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
