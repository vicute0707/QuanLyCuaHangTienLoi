package dao;

import entity.SanPham;
import connectSQL.KetNoiSQL;

import java.sql.*;
import java.util.ArrayList;

public class SanPhamDAO {
    private Connection conn;
    
    public SanPhamDAO() {
        conn = KetNoiSQL.getInstance().getConnection();
    }
    
    /**
     * Lấy danh sách tất cả sản phẩm
     */
    public ArrayList<SanPham> getList() {
        ArrayList<SanPham> list = new ArrayList<>();
        // Sửa lại câu SQL để lấy cả TenDM từ bảng DanhMuc
        String sql = """
            SELECT sp.MaSP, sp.TenSP, sp.GiaBan, sp.SoLuong, sp.DonVi, 
                   sp.HinhAnh, sp.TrangThai, sp.MaDM, dm.TenDanhMuc
            FROM SanPham sp
            INNER JOIN DanhMuc dm ON sp.MaDM = dm.MaDM
            ORDER BY sp.MaSP
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            
            while(rs.next()) {
                SanPham sp = new SanPham();
                sp.setMaSP(rs.getString("MaSP"));
                sp.setTenSP(rs.getString("TenSP"));
                // Lấy TenDanhMuc từ ResultSet
                sp.setTenDM(rs.getString("TenDanhMuc")); 
                sp.setGiaBan(rs.getDouble("GiaBan"));
                sp.setSoLuong(rs.getInt("SoLuong"));
                sp.setDonVi(rs.getString("DonVi"));
                sp.setHinhAnh(rs.getString("HinhAnh"));
                sp.setTrangThai(rs.getString("TrangThai"));
                
                list.add(sp);
                System.out.println("Loaded: " + sp.getMaSP() + 
                                 " - " + sp.getTenSP() + 
                                 " - Category: " + sp.getTenDM());
            }
            
            System.out.println("Total products loaded: " + list.size());
            
        } catch(SQLException e) {
            System.err.println("Error in getList: ");
            e.printStackTrace();
        }
        return list;
    }

    
    /**
     * Lấy sản phẩm theo mã
     */
    public SanPham getById(String maSP) {
        String sql = """
            SELECT sp.MaSP, sp.TenSP, sp.GiaBan, sp.SoLuong, sp.DonVi, 
                   sp.HinhAnh, sp.TrangThai, sp.MaDM, dm.TenDM
            FROM SanPham sp
            LEFT JOIN DanhMuc dm ON sp.MaDM = dm.MaDM
            WHERE sp.MaSP = ?
        """;
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, maSP);
            
            try (ResultSet rs = ps.executeQuery()) {
                if(rs.next()) {
                    SanPham sp = new SanPham();
                    sp.setMaSP(rs.getString("MaSP"));
                    sp.setTenSP(rs.getString("TenSP"));
                    sp.setGiaBan(rs.getDouble("GiaBan"));
                    sp.setSoLuong(rs.getInt("SoLuong"));
                    sp.setDonVi(rs.getString("DonVi"));
                    sp.setHinhAnh(rs.getString("HinhAnh"));
                    sp.setTrangThai(rs.getString("TrangThai"));
                    sp.setTenDM(rs.getString("TenDM"));
                    return sp;
                }
            }
        } catch(SQLException e) {
            System.err.println("Error in getById: ");
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * Lấy sản phẩm theo danh mục
     */
    public ArrayList<SanPham> getByCategory(String tenDM) {
        ArrayList<SanPham> list = new ArrayList<>();
        
        if(tenDM.equals("Tất cả")) {
            return getList();
        }
        
        String sql = """
            SELECT sp.MaSP, sp.TenSP, sp.GiaBan, sp.SoLuong, sp.DonVi, 
                   sp.HinhAnh, sp.TrangThai, sp.MaDM, dm.TenDanhMuc
            FROM SanPham sp
            INNER JOIN DanhMuc dm ON sp.MaDM = dm.MaDM
            WHERE dm.TenDanhMuc = ?
            ORDER BY sp.MaSP
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, tenDM);
            ResultSet rs = ps.executeQuery();
            
            while(rs.next()) {
                SanPham sp = new SanPham();
                sp.setMaSP(rs.getString("MaSP"));
                sp.setTenSP(rs.getString("TenSP"));
                sp.setTenDM(rs.getString("TenDanhMuc"));
                sp.setGiaBan(rs.getDouble("GiaBan"));
                sp.setSoLuong(rs.getInt("SoLuong"));
                sp.setDonVi(rs.getString("DonVi"));
                sp.setHinhAnh(rs.getString("HinhAnh"));
                sp.setTrangThai(rs.getString("TrangThai"));
                
                list.add(sp);
            }
        } catch(SQLException e) {
            System.err.println("Error in getByCategory: ");
            e.printStackTrace();
        }
        return list;
    }
    
    /**
     * Thêm sản phẩm mới
     */
    public boolean add(SanPham sp) {
        String sql = """
            INSERT INTO SanPham(MaSP, TenSP, MaDM, GiaBan, SoLuong, DonVi, HinhAnh, TrangThai)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, sp.getMaSP());
            ps.setString(2, sp.getTenSP());
            ps.setString(3, getMaDM(sp.getTenDM()));
            ps.setDouble(4, sp.getGiaBan());
            ps.setInt(5, sp.getSoLuong());
            ps.setString(6, sp.getDonVi());
            ps.setString(7, sp.getHinhAnh());
            ps.setString(8, sp.getTrangThai());
            
            int result = ps.executeUpdate();
            System.out.println("Add result: " + result + " rows affected");
            return result > 0;
            
        } catch(SQLException e) {
            System.err.println("Error in add: ");
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Cập nhật sản phẩm
     */
    public boolean update(SanPham sp) {
        String sql = """
            UPDATE SanPham 
            SET TenSP=?, MaDM=?, GiaBan=?, SoLuong=?, DonVi=?, HinhAnh=?, TrangThai=?
            WHERE MaSP=?
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, sp.getTenSP());
            ps.setString(2, getMaDM(sp.getTenDM()));
            ps.setDouble(3, sp.getGiaBan());
            ps.setInt(4, sp.getSoLuong());
            ps.setString(5, sp.getDonVi());
            ps.setString(6, sp.getHinhAnh());
            ps.setString(7, sp.getTrangThai());
            ps.setString(8, sp.getMaSP());
            
            int result = ps.executeUpdate();
            System.out.println("Update result: " + result + " rows affected");
            return result > 0;
            
        } catch(SQLException e) {
            System.err.println("Error in update: ");
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Xóa sản phẩm
     */
    public boolean delete(String maSP) {
        // Kiểm tra xem sản phẩm có trong hóa đơn không
        if(isProductInInvoice(maSP)) {
            System.err.println("Cannot delete: Product exists in invoices");
            return false;
        }
        
        String sql = "DELETE FROM SanPham WHERE MaSP=?";
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, maSP);
            
            int result = ps.executeUpdate();
            System.out.println("Delete result: " + result + " rows affected");
            return result > 0;
            
        } catch(SQLException e) {
            System.err.println("Error in delete: ");
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Tìm kiếm sản phẩm
     */
    public ArrayList<SanPham> search(String keyword) {
        ArrayList<SanPham> list = new ArrayList<>();
        String sql = """
            SELECT sp.MaSP, sp.TenSP, sp.GiaBan, sp.SoLuong, sp.DonVi, 
                   sp.HinhAnh, sp.TrangThai, sp.MaDM, dm.TenDM
            FROM SanPham sp
            LEFT JOIN DanhMuc dm ON sp.MaDM = dm.MaDM
            WHERE sp.TenSP LIKE ? OR sp.MaSP LIKE ? OR dm.TenDM LIKE ?
            ORDER BY sp.MaSP
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            String searchPattern = "%" + keyword + "%";
            ps.setString(1, searchPattern);
            ps.setString(2, searchPattern);
            ps.setString(3, searchPattern);
            
            try (ResultSet rs = ps.executeQuery()) {
                while(rs.next()) {
                    SanPham sp = new SanPham();
                    sp.setMaSP(rs.getString("MaSP"));
                    sp.setTenSP(rs.getString("TenSP"));
                    sp.setGiaBan(rs.getDouble("GiaBan"));
                    sp.setSoLuong(rs.getInt("SoLuong"));
                    sp.setDonVi(rs.getString("DonVi"));
                    sp.setHinhAnh(rs.getString("HinhAnh"));
                    sp.setTrangThai(rs.getString("TrangThai"));
                    sp.setTenDM(rs.getString("TenDM"));
                    list.add(sp);
                }
            }
        } catch(SQLException e) {
            System.err.println("Error in search: ");
            e.printStackTrace();
        }
        return list;
    }
    
    /**
     * Kiểm tra sản phẩm có trong hóa đơn không
     */
    private boolean isProductInInvoice(String maSP) {
        String sql = "SELECT COUNT(*) FROM ChiTietHoaDon WHERE MaSP = ?";
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, maSP);
            
            try (ResultSet rs = ps.executeQuery()) {
                if(rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch(SQLException e) {
            System.err.println("Error checking product in invoice: ");
            e.printStackTrace();
        }
        return true; // Trả về true để đảm bảo an toàn
    }
    
    /**
     * Lấy mã danh mục từ tên danh mục
     */
    private String getMaDM(String tenDM) {
        String sql = "SELECT MaDM FROM DanhMuc WHERE TenDM = ?";
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, tenDM);
            
            try (ResultSet rs = ps.executeQuery()) {
                if(rs.next()) {
                    return rs.getString("MaDM");
                }
            }
        } catch(SQLException e) {
            System.err.println("Error getting MaDM: ");
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * Tạo mã sản phẩm mới
     */
    public String generateNewId() {
        String sql = "SELECT MAX(CAST(SUBSTRING(MaSP, 3, LEN(MaSP)) AS INT)) AS MaxID FROM SanPham";
        
        try (PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            
            if(rs.next()) {
                int maxId = rs.getInt("MaxID");
                return String.format("SP%03d", maxId + 1);
            }
            
        } catch(SQLException e) {
            System.err.println("Error generating new ID: ");
            e.printStackTrace();
        }
        return "SP001";
    }
    
    /**
     * Cập nhật trạng thái theo số lượng
     */
    public void updateStatus(String maSP) {
        String sql = """
            UPDATE SanPham SET TrangThai = 
            CASE 
                WHEN SoLuong = 0 THEN N'Hết hàng'
                WHEN SoLuong <= 10 THEN N'Sắp hết'
                ELSE N'Còn hàng'
            END
            WHERE MaSP = ?
        """;
            
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, maSP);
            ps.executeUpdate();
            
        } catch(SQLException e) {
            System.err.println("Error updating status: ");
            e.printStackTrace();
        }
    }
}