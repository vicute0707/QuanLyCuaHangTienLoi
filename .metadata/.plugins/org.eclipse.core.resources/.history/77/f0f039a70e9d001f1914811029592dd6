package view;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;

import dao.DanhMucDAO;
import dao.SanPhamDAO;
import dialog.SuaSanPhamDialog;
import dialog.ThemSanPhamDialog;
import entity.SanPham;
import style.RoundedBorder;

public class Form_SanPham extends JPanel {
	private static final Color PRIMARY = new Color(255, 255, 255);
	private static final Color SECONDARY = new Color(243, 244, 246);
	private static final Color ACCENT = new Color(37, 99, 235);
	private static final Color ACCENT_HOVER = new Color(29, 78, 216);
	private static final Color BACKGROUND = new Color(249, 250, 251);
	private static final Color BORDER = new Color(229, 231, 235);
	private static final Color TEXT = new Color(17, 24, 39);
	private static final Color TEXT_SECONDARY = new Color(107, 114, 128);
	private static final Font TITLE_FONT = new Font("Segoe UI", Font.BOLD, 24);
	private static final Font BODY_FONT = new Font("Segoe UI", Font.PLAIN, 14);

	private JTable tblSanPham;
	private DefaultTableModel modelSanPham;
	private JTextField txtSearch;
	private JLabel lblTotalProducts;
	private SanPhamDAO spDAO;
	private DecimalFormat formatter;
	JButton btnAdd, btnDelete;
	private JComboBox<String> cmbCategory;
	private DanhMucDAO dmDAO;

	public Form_SanPham() {
		spDAO = new SanPhamDAO();
		dmDAO = new DanhMucDAO(); // Thêm khởi tạo DanhMucDAO
		formatter = new DecimalFormat("#,###");

		setLayout(new BorderLayout(0, 0));
		setBackground(BACKGROUND);
		setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));

		initComponents();
		setupListeners();
		loadData();
	}

	private void initComponents() {

	    setLayout(new BorderLayout(0, 0));
	    setBackground(BACKGROUND);
	    setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));

	    // Header Panel (Title + Tools)
	    JPanel headerPanel = new JPanel(new BorderLayout(20, 0));
	    headerPanel.setOpaque(false);

	    // Left side - Title & Total Products
	    JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
	    titlePanel.setOpaque(false);

	    JLabel lblTitle = new JLabel("Quản lý sản phẩm");
	    lblTitle.setFont(TITLE_FONT);
	    lblTitle.setForeground(TEXT);

	    // Total products counter
	    JPanel totalPanel = new JPanel();
	    totalPanel.setOpaque(false);
	    totalPanel.setBorder(new CompoundBorder(
	        new RoundedBorder(8, BORDER),
	        BorderFactory.createEmptyBorder(5, 15, 5, 15)
	    ));

	    lblTotalProducts = new JLabel("0");
	    lblTotalProducts.setFont(new Font("Segoe UI", Font.BOLD, 16));
	    lblTotalProducts.setForeground(ACCENT);

	    JLabel lblProductsText = new JLabel(" sản phẩm");
	    lblProductsText.setFont(BODY_FONT);
	    lblProductsText.setForeground(TEXT_SECONDARY);

	    totalPanel.add(lblTotalProducts);
	    totalPanel.add(lblProductsText);

	    titlePanel.add(lblTitle);
	    titlePanel.add(totalPanel);

	    // Right side - Action Buttons
	    JPanel toolsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
	    toolsPanel.setOpaque(false);

	    JButton btnExport = new JButton("Xuất Excel");
	    btnAdd = new JButton("Thêm sản phẩm");
	    btnEdit = new JButton("Sửa");
	    btnDelete = new JButton("Xóa");

	    styleButton(btnExport, Color.WHITE, TEXT, false);
	    styleButton(btnAdd, ACCENT, Color.WHITE, true);
	    styleButton(btnEdit, new Color(245, 158, 11), Color.WHITE, true);
	    styleButton(btnDelete, new Color(239, 68, 68), Color.WHITE, true);

	    // Disable edit & delete buttons by default
	    btnEdit.setEnabled(false);
	    btnDelete.setEnabled(false);

	    toolsPanel.add(btnExport);
	    toolsPanel.add(btnDelete);
	    toolsPanel.add(btnEdit);
	    toolsPanel.add(btnAdd);

	    headerPanel.add(titlePanel, BorderLayout.WEST);
	    headerPanel.add(toolsPanel, BorderLayout.EAST);

	    // Search & Filter Panel
	    JPanel actionsPanel = new JPanel(new BorderLayout(20, 0));
	    actionsPanel.setOpaque(false);
	    actionsPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));

	    // Left side - Category Filter
	    JPanel filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
	    filterPanel.setOpaque(false);

	    JLabel lblCategory = new JLabel("Danh mục:");
	    lblCategory.setFont(BODY_FONT);
	    lblCategory.setForeground(TEXT);

	    // Lấy danh sách danh mục từ CSDL
	    ArrayList<String> dsDanhMuc = dmDAO.getAllDanhMuc();
	    cmbCategory = new JComboBox<>(dsDanhMuc.toArray(new String[0]));
	    styleComboBox(cmbCategory);

	    filterPanel.add(lblCategory);
	    filterPanel.add(cmbCategory);

	    // Right side - Search
	    JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
	    searchPanel.setOpaque(false);

	    txtSearch = new JTextField(25);
	    styleTextField(txtSearch, "Tìm kiếm sản phẩm...");

	    searchPanel.add(txtSearch);

	    actionsPanel.add(filterPanel, BorderLayout.WEST);
	    actionsPanel.add(searchPanel, BorderLayout.EAST);

	    // Table Panel
	    // Initialize table model with columns
	    String[] columns = {
	        "Mã SP", "Hình ảnh", "Tên sản phẩm", "Danh mục", 
	        "Giá bán", "Tồn kho", "Đơn vị", "Trạng thái"
	    };

	    modelSanPham = new DefaultTableModel(columns, 0) {
	        @Override
	        public boolean isCellEditable(int row, int column) {
	            return false;
	        }

	        @Override
	        public Class<?> getColumnClass(int column) {
	            if (column == 1) return ImageIcon.class;
	            return Object.class;
	        }
	    };

	    tblSanPham = new JTable(modelSanPham);
	    styleTable(tblSanPham);

	    // Column sizes
	    int[] columnWidths = {80, 80, 250, 150, 120, 100, 100, 120};
	    for (int i = 0; i < columnWidths.length; i++) {
	        tblSanPham.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
	    }

	    JScrollPane scrollPane = new JScrollPane(tblSanPham);
	    scrollPane.setBorder(BorderFactory.createEmptyBorder());
	    scrollPane.getVerticalScrollBar().setUI(new ModernScrollBarUI());
	    scrollPane.getHorizontalScrollBar().setUI(new ModernScrollBarUI());

	    JPanel tablePanel = new JPanel(new BorderLayout());
	    tablePanel.setBackground(PRIMARY);
	    tablePanel.setBorder(new CompoundBorder(
	        new RoundedBorder(8, BORDER),
	        BorderFactory.createEmptyBorder(1, 1, 1, 1)
	    ));
	    tablePanel.add(scrollPane);

	    // Add all components to main panel
	    add(headerPanel, BorderLayout.NORTH);
	    add(actionsPanel, BorderLayout.CENTER);
	    add(tablePanel, BorderLayout.SOUTH);

	    // Setup event listeners
	    setupListeners();
	}

	private void initTable() {
		String[] columns = { "Mã SP", "Hình ảnh", "Tên sản phẩm", "Danh mục", "Giá bán", "Tồn kho", "Đơn vị",
				"Trạng thái" };
		modelSanPham = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}

			@Override
			public Class<?> getColumnClass(int column) {
				if (column == 1)
					return ImageIcon.class;
				return Object.class;
			}
		};

		tblSanPham = new JTable(modelSanPham);
		styleTable(tblSanPham);

		// Column sizes
		int[] columnWidths = { 80, 80, 250, 150, 120, 100, 100, 120 };
		for (int i = 0; i < columnWidths.length; i++) {
			tblSanPham.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
		}

		// Center align for specific columns
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		int[] centerColumns = { 0, 4, 5, 6, 7 };
		for (int i : centerColumns) {
			tblSanPham.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
		}

		// Status renderer
		tblSanPham.getColumnModel().getColumn(7).setCellRenderer(new StatusRenderer());
	}

	private void loadData() {
		try {
	        modelSanPham.setRowCount(0);
	        ArrayList<SanPham> list = spDAO.getList();
	        
	        for(SanPham sp : list) {
	            Object[] row = {
	                sp.getMaSP(),
	                loadProductImage(sp.getHinhAnh()),
	                sp.getTenSP(),
	                sp.getTenDM(),
	                formatter.format(sp.getGiaBan()) + " đ",
	                sp.getSoLuong(),
	                sp.getDonVi(),
	                sp.getTrangThai()
	            };
	            modelSanPham.addRow(row);
	        }
	        updateTotalCount();
	        
	    } catch(Exception e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(this,
	            "Lỗi khi tải dữ liệu: " + e.getMessage(),
	            "Lỗi",
	            JOptionPane.ERROR_MESSAGE);
	    }
	}

	private void setupListeners() {
	    // Lọc theo danh mục
	    cmbCategory.addActionListener(e -> filterByCategory());

	    // Tìm kiếm
	    txtSearch.getDocument().addDocumentListener(new DocumentListener() {
	        @Override
	        public void insertUpdate(DocumentEvent e) { searchProducts(); }
	        @Override
	        public void removeUpdate(DocumentEvent e) { searchProducts(); }
	        @Override
	        public void changedUpdate(DocumentEvent e) { searchProducts(); }
	    });

	    // Nút thêm
	    btnAdd.addActionListener(e -> handleAddProduct());
	    
	    // Nút sửa 
	    btnEdit.addActionListener(e -> handleEditProduct());
	    
	    // Nút xóa
	    btnDelete.addActionListener(e -> handleDeleteProduct());

	    // Enable/disable buttons based on selection
	    tblSanPham.getSelectionModel().addListSelectionListener(e -> {
	        boolean hasSelection = tblSanPham.getSelectedRow() != -1;
	        btnEdit.setEnabled(hasSelection);
	        btnDelete.setEnabled(hasSelection);
	    });
	}

	private void handleAddProduct() {
	    ThemSanPhamDialog dialog = new ThemSanPhamDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
	    dialog.setLocationRelativeTo(this);
	    dialog.setVisible(true);
	    
	    if(dialog.isAccepted()) {
	        SanPham sp = dialog.getSanPham();
	        if(sp != null) {
	            if(spDAO.add(sp)) {
	                loadData(); // Refresh lại bảng
	                JOptionPane.showMessageDialog(this,
	                    "Thêm sản phẩm thành công!",
	                    "Thông báo",
	                    JOptionPane.INFORMATION_MESSAGE);
	            } else {
	                JOptionPane.showMessageDialog(this,
	                    "Thêm sản phẩm thất bại!",
	                    "Lỗi",
	                    JOptionPane.ERROR_MESSAGE);
	            }
	        }
	    }
	}

	

	private void handleDeleteProduct() {
	    int row = tblSanPham.getSelectedRow();
	    if(row != -1) {
	        String maSP = tblSanPham.getValueAt(row, 0).toString();
	        String tenSP = tblSanPham.getValueAt(row, 2).toString();
	        
	        int confirm = JOptionPane.showConfirmDialog(this,
	            "Bạn có chắc muốn xóa sản phẩm \"" + tenSP + "\"?",
	            "Xác nhận xóa",
	            JOptionPane.YES_NO_OPTION,
	            JOptionPane.WARNING_MESSAGE);
	            
	        if(confirm == JOptionPane.YES_OPTION) {
	            if(spDAO.delete(maSP)) {
	                modelSanPham.removeRow(row);
	                updateTotalCount();
	                JOptionPane.showMessageDialog(this,
	                    "Xóa sản phẩm thành công!",
	                    "Thông báo",
	                    JOptionPane.INFORMATION_MESSAGE);
	            } else {
	                JOptionPane.showMessageDialog(this,
	                    "Xóa sản phẩm thất bại!",
	                    "Lỗi", 
	                    JOptionPane.ERROR_MESSAGE);
	            }
	        }
	    }
	}

	private void filterByCategory() {
		String selectedCategory = cmbCategory.getSelectedItem().toString();
		if (selectedCategory.equals("Tất cả")) {
			loadData();
			return;
		}

		modelSanPham.setRowCount(0);
		ArrayList<SanPham> list = spDAO.getByCategory(selectedCategory);
		DecimalFormat formatter = new DecimalFormat("#,###");

		for (SanPham sp : list) {
			Object[] row = { sp.getMaSP(), loadProductImage(sp.getHinhAnh()), sp.getTenSP(), sp.getTenDM(),
					formatter.format(sp.getGiaBan()) + " đ", sp.getSoLuong(), sp.getDonVi(), sp.getTrangThai() };
			modelSanPham.addRow(row);
		}
		updateTotalCount();
	}

	private void searchProducts() {
		String keyword = txtSearch.getText().trim();
		if (keyword.equals("Tìm kiếm sản phẩm...") || keyword.isEmpty()) {
			loadData();
			return;
		}

		modelSanPham.setRowCount(0);
		ArrayList<SanPham> list = spDAO.search(keyword);
		DecimalFormat formatter = new DecimalFormat("#,###");

		for (SanPham sp : list) {
			Object[] row = { sp.getMaSP(), loadProductImage(sp.getHinhAnh()), sp.getTenSP(), sp.getTenDM(),
					formatter.format(sp.getGiaBan()) + " đ", sp.getSoLuong(), sp.getDonVi(), sp.getTrangThai() };
			modelSanPham.addRow(row);
		}
		updateTotalCount();
	}

	private void updateTable(ArrayList<SanPham> list) {
		modelSanPham.setRowCount(0);
		for (SanPham sp : list) {
			Object[] row = { sp.getMaSP(), loadProductImage(sp.getHinhAnh()), sp.getTenSP(), sp.getTenDM(),
					formatter.format(sp.getGiaBan()) + " đ", sp.getSoLuong(), sp.getDonVi(), sp.getTrangThai() };
			modelSanPham.addRow(row);
		}
		updateTotalCount();
	}

	private void deleteProduct() {
		int row = tblSanPham.getSelectedRow();
		if (row != -1) {
			String maSP = tblSanPham.getValueAt(row, 0).toString();
			String tenSP = tblSanPham.getValueAt(row, 2).toString();

			int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sản phẩm \"" + tenSP + "\"?",
					"Xác nhận xóa", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

			if (confirm == JOptionPane.YES_OPTION) {
				if (spDAO.delete(maSP)) {
					modelSanPham.removeRow(row);
					updateTotalCount();
					JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!", "Thông báo",
							JOptionPane.INFORMATION_MESSAGE);
				}
			}
		}
	}

	// Utility methods
	private void styleTable(JTable table) {
		table.setFont(BODY_FONT);
		table.setRowHeight(60);
		table.setShowGrid(false);
		table.setShowHorizontalLines(true);
		table.setGridColor(BORDER);
		table.setBackground(PRIMARY);
		table.setSelectionBackground(new Color(ACCENT.getRed(), ACCENT.getGreen(), ACCENT.getBlue(), 30));
		table.setSelectionForeground(TEXT);

		JTableHeader header = table.getTableHeader();
		header.setFont(new Font("Segoe UI", Font.BOLD, 14));
		header.setBackground(PRIMARY);
		header.setForeground(TEXT);
		header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER));
	}

	private void styleTextField(JTextField textField, String placeholder) {
		textField.setFont(BODY_FONT);
		textField.setPreferredSize(new Dimension(textField.getPreferredSize().width, 36));
		textField.setBorder(
				new CompoundBorder(new RoundedBorder(6, BORDER), BorderFactory.createEmptyBorder(5, 15, 5, 15)));

		// Placeholder
		textField.setForeground(TEXT_SECONDARY);
		textField.setText(placeholder);

		textField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusGained(FocusEvent e) {
				if (textField.getText().equals(placeholder)) {
					textField.setText("");
					textField.setForeground(TEXT);
				}
			}

			@Override
			public void focusLost(FocusEvent e) {
				if (textField.getText().isEmpty()) {
					textField.setForeground(TEXT_SECONDARY);
					textField.setText(placeholder);
				}
			}
		});
	}

	private void styleComboBox(JComboBox<String> comboBox) {
		comboBox.setFont(BODY_FONT);
		comboBox.setPreferredSize(new Dimension(200, 36));
		comboBox.setBackground(PRIMARY);
		comboBox.setBorder(
				new CompoundBorder(new RoundedBorder(6, BORDER), BorderFactory.createEmptyBorder(5, 15, 5, 15)));
	}

	private void styleButton(JButton button, Color bg, Color fg, boolean isAccent) {
		button.setFont(BODY_FONT);
		button.setForeground(fg);
		button.setBackground(bg);
		button.setPreferredSize(new Dimension(button.getPreferredSize().width, 36));
		button.setBorder(new CompoundBorder(new RoundedBorder(6, isAccent ? bg : BORDER),
				BorderFactory.createEmptyBorder(5, 15, 5, 15)));
		button.setFocusPainted(false);
		button.setCursor(new Cursor(Cursor.HAND_CURSOR));

		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				button.setBackground(isAccent ? ACCENT_HOVER : SECONDARY);
			}

			@Override
			public void mouseExited(MouseEvent e) {
				button.setBackground(bg);
			}
		});
	}

	private ImageIcon loadProductImage(String imageName) {
		try {
			// Load ảnh từ thư mục resources
			String path = "/images/products/" + imageName;
			ImageIcon icon = new ImageIcon(getClass().getResource(path));
			// Scale to 40x40
			Image img = icon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);
			return new ImageIcon(img);
		} catch (Exception e) {
			// Trả về ảnh mặc định nếu không tìm thấy
			return new ImageIcon(new BufferedImage(40, 40, BufferedImage.TYPE_INT_ARGB));
		}
	}

	private void updateTotalCount() {
		lblTotalProducts.setText(String.valueOf(modelSanPham.getRowCount()));
	}
}

// StatusRenderer class cho cột trạng thái
class StatusRenderer extends DefaultTableCellRenderer {
	@Override
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
			int row, int column) {

		JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

		label.setHorizontalAlignment(JLabel.CENTER);
		label.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

		if (value != null) {
			String status = value.toString();
			switch (status) {
			case "Còn hàng":
				label.setBackground(new Color(220, 252, 231));
				label.setForeground(new Color(22, 163, 74));
				break;
			case "Sắp hết":
				label.setBackground(new Color(254, 249, 195));
				label.setForeground(new Color(202, 138, 4));
				break;
			case "Hết hàng":
				label.setBackground(new Color(254, 226, 226));
				label.setForeground(new Color(220, 38, 38));
				break;
			default:
				label.setBackground(table.getBackground());
				label.setForeground(table.getForeground());
			}
		}

		if (!isSelected) {
			label.setOpaque(true);
		}

		return label;
	}
}